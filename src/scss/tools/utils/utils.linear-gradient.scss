//// LINEAR GRADIENT
/// @group linear-gradient
/// @access public
/// @author Unknown
////

/// It allows us to use a mixin that draws a gradient given a direction and a range of values.
/// @example scss - Example usage:
///  @include linear-gradient(to left, transparent 0%, white 20%, white 80%, transparent 100%);
/// @param {string} $direction
/// @output It returns the linear-gradient property in its different forms for different browsers, with a prefix and with a transparent security declaration.
/// @example css - CSS output:
///   background: transparent;
///   background: -webkit-gradient(linear, right top, left top, from(transparent), color-stop(20%, white), color-stop(80%, white), to(transparent));
///   background: linear-gradient(to left, transparent 0%, white 20%, white 80%, transparent 100%);
/// @param {string | boolean} $prueba [hola 16px] - Descripcion
@mixin linear-gradient($direction, $color-stops...) {
  // Direction has been omitted and happens to be a color-stop
  @if is-direction($direction) == false {
    $color-stops: $direction, $color-stops;
    $direction: 180deg;
  }

  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}

/// Test if `$value` is a valid direction
/// @group linear-gradient
/// @param {*} $value - Value to test
/// @return {Bool}
/// @alias private
@function is-direction($value) {
  $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

  @return $is-keyword or $is-angle;
}

/// Convert a direction to legacy syntax
/// @group linear-gradient
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
/// @throw Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.;
@function legacy-direction($value) {
  @if is-direction($value) == false {
    @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
  }

  $conversion-map: (
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }

  @return 90deg - $value;
}
